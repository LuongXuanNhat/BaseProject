// <auto-generated />
using System;
using BaseProject.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseProject.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230605092747_Update_StringLength_COntent")]
    partial class Update_StringLength_COntent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseProject.Data.Entities.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs", (string)null);

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Value = "Đây là trang chủ của Web_Review"
                        },
                        new
                        {
                            Key = "HomeKeyWord",
                            Value = "Đây là từ khóa của Web_Review"
                        },
                        new
                        {
                            Key = "HomeDescription",
                            Value = "Đây là mô tả của Web_Review"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575"),
                            ConcurrencyStamp = "e85fb222-e158-4830-94d9-4d0a846c497c",
                            Description = "Administrator Role",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("cfafcfcd-d796-43f4-8ac0-ead43bd2f18a"),
                            ConcurrencyStamp = "8fb54943-eb43-44b9-bfe7-95be38b5816f",
                            Description = "User Role",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBir")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1f771da-b318-42f8-a003-5a15614216f5"),
                            AccessFailedCount = 0,
                            Address = "3a, Thạch Mỹ Lợi, Quận 2, Tp. Hồ Chí Minh",
                            ConcurrencyStamp = "a3d6cd76-f5a5-4c5a-937c-4a6155df29ce",
                            DateOfBir = new DateTime(2002, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "onionwebdev@gmail.com",
                            EmailConfirmed = true,
                            Gender = 0,
                            Image = "",
                            LockoutEnabled = false,
                            Name = "Lương Xuân Nhất",
                            NormalizedEmail = "onionwebdev@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAENWO4zYzE4bap4f4eLzWG4C9mmvVXWLesw2F3cTEr8FYO4sjL+mT9Cqo6GyGoEogqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.CategoriesDetail", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "PostId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PostId");

                    b.ToTable("CategoriesDetails", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.CategoriesLocation", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("CategoriesId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("CategoriesLocations", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = 18,
                            LocationId = 24,
                            Id = 1
                        },
                        new
                        {
                            CategoriesId = 15,
                            LocationId = 24,
                            Id = 2
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 100,
                            Id = 3
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 100,
                            Id = 4
                        },
                        new
                        {
                            CategoriesId = 8,
                            LocationId = 101,
                            Id = 5
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 102,
                            Id = 6
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 102,
                            Id = 7
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 103,
                            Id = 8
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 103,
                            Id = 9
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 103,
                            Id = 10
                        },
                        new
                        {
                            CategoriesId = 5,
                            LocationId = 103,
                            Id = 11
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 103,
                            Id = 12
                        },
                        new
                        {
                            CategoriesId = 18,
                            LocationId = 104,
                            Id = 13
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 104,
                            Id = 14
                        },
                        new
                        {
                            CategoriesId = 14,
                            LocationId = 104,
                            Id = 15
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 105,
                            Id = 15
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 107,
                            Id = 16
                        },
                        new
                        {
                            CategoriesId = 11,
                            LocationId = 108,
                            Id = 17
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 109,
                            Id = 18
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 109,
                            Id = 19
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 109,
                            Id = 20
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 110,
                            Id = 21
                        },
                        new
                        {
                            CategoriesId = 4,
                            LocationId = 110,
                            Id = 22
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 111,
                            Id = 23
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 111,
                            Id = 24
                        },
                        new
                        {
                            CategoriesId = 8,
                            LocationId = 112,
                            Id = 25
                        },
                        new
                        {
                            CategoriesId = 11,
                            LocationId = 114,
                            Id = 26
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 115,
                            Id = 27
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 116,
                            Id = 28
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 116,
                            Id = 29
                        },
                        new
                        {
                            CategoriesId = 17,
                            LocationId = 117,
                            Id = 30
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 118,
                            Id = 31
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 118,
                            Id = 32
                        },
                        new
                        {
                            CategoriesId = 16,
                            LocationId = 118,
                            Id = 33
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 119,
                            Id = 34
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 120,
                            Id = 35
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 120,
                            Id = 36
                        },
                        new
                        {
                            CategoriesId = 4,
                            LocationId = 120,
                            Id = 37
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 121,
                            Id = 38
                        },
                        new
                        {
                            CategoriesId = 12,
                            LocationId = 122,
                            Id = 39
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 123,
                            Id = 40
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 123,
                            Id = 41
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 124,
                            Id = 42
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 125,
                            Id = 43
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 125,
                            Id = 44
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 126,
                            Id = 45
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 126,
                            Id = 46
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 126,
                            Id = 47
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 127,
                            Id = 48
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 128,
                            Id = 49
                        },
                        new
                        {
                            CategoriesId = 8,
                            LocationId = 128,
                            Id = 50
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 129,
                            Id = 51
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 129,
                            Id = 52
                        },
                        new
                        {
                            CategoriesId = 4,
                            LocationId = 129,
                            Id = 53
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 130,
                            Id = 54
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 130,
                            Id = 55
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 131,
                            Id = 56
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 131,
                            Id = 57
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 132,
                            Id = 58
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 132,
                            Id = 59
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 132,
                            Id = 60
                        },
                        new
                        {
                            CategoriesId = 12,
                            LocationId = 132,
                            Id = 61
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 132,
                            Id = 62
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 133,
                            Id = 63
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 133,
                            Id = 64
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 133,
                            Id = 65
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 133,
                            Id = 66
                        },
                        new
                        {
                            CategoriesId = 12,
                            LocationId = 133,
                            Id = 67
                        },
                        new
                        {
                            CategoriesId = 11,
                            LocationId = 134,
                            Id = 68
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 135,
                            Id = 69
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 135,
                            Id = 70
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 136,
                            Id = 71
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 136,
                            Id = 72
                        },
                        new
                        {
                            CategoriesId = 4,
                            LocationId = 136,
                            Id = 73
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 136,
                            Id = 74
                        },
                        new
                        {
                            CategoriesId = 8,
                            LocationId = 137,
                            Id = 75
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 137,
                            Id = 76
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 138,
                            Id = 77
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 138,
                            Id = 78
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 140,
                            Id = 79
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 141,
                            Id = 80
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 141,
                            Id = 81
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 142,
                            Id = 82
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 142,
                            Id = 83
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 142,
                            Id = 84
                        },
                        new
                        {
                            CategoriesId = 4,
                            LocationId = 142,
                            Id = 85
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 142,
                            Id = 86
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 143,
                            Id = 87
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 143,
                            Id = 88
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 144,
                            Id = 89
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 144,
                            Id = 90
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 146,
                            Id = 91
                        },
                        new
                        {
                            CategoriesId = 10,
                            LocationId = 147,
                            Id = 92
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 147,
                            Id = 93
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 147,
                            Id = 94
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 148,
                            Id = 95
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 148,
                            Id = 96
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 148,
                            Id = 97
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 149,
                            Id = 98
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 149,
                            Id = 99
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 149,
                            Id = 100
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 142,
                            Id = 101
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 136,
                            Id = 102
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 132,
                            Id = 103
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 120,
                            Id = 104
                        },
                        new
                        {
                            CategoriesId = 9,
                            LocationId = 118,
                            Id = 105
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 150,
                            Id = 106
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 151,
                            Id = 107
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 151,
                            Id = 108
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 152,
                            Id = 109
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 152,
                            Id = 110
                        },
                        new
                        {
                            CategoriesId = 19,
                            LocationId = 152,
                            Id = 111
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 153,
                            Id = 112
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 153,
                            Id = 113
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 153,
                            Id = 114
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 151,
                            Id = 115
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 154,
                            Id = 116
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 154,
                            Id = 117
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 155,
                            Id = 118
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 155,
                            Id = 119
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 156,
                            Id = 120
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 156,
                            Id = 121
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 157,
                            Id = 122
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 157,
                            Id = 123
                        },
                        new
                        {
                            CategoriesId = 1,
                            LocationId = 158,
                            Id = 124
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 158,
                            Id = 125
                        },
                        new
                        {
                            CategoriesId = 2,
                            LocationId = 168,
                            Id = 126
                        },
                        new
                        {
                            CategoriesId = 3,
                            LocationId = 168,
                            Id = 127
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Category", b =>
                {
                    b.Property<int>("CategoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CategoriesId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            Name = "Ẩm thực"
                        },
                        new
                        {
                            CategoriesId = 2,
                            Name = "Khám phá"
                        },
                        new
                        {
                            CategoriesId = 3,
                            Name = "Vui chơi-Giải trí"
                        },
                        new
                        {
                            CategoriesId = 4,
                            Name = "Nghỉ dưỡng"
                        },
                        new
                        {
                            CategoriesId = 5,
                            Name = "Bãi biển"
                        },
                        new
                        {
                            CategoriesId = 6,
                            Name = "Cắm trại"
                        },
                        new
                        {
                            CategoriesId = 7,
                            Name = "Khu di tích"
                        },
                        new
                        {
                            CategoriesId = 8,
                            Name = "Bảo tàng"
                        },
                        new
                        {
                            CategoriesId = 9,
                            Name = "Khu du lịch"
                        },
                        new
                        {
                            CategoriesId = 10,
                            Name = "Công viên"
                        },
                        new
                        {
                            CategoriesId = 11,
                            Name = "Nhà thờ"
                        },
                        new
                        {
                            CategoriesId = 12,
                            Name = "Chợ"
                        },
                        new
                        {
                            CategoriesId = 13,
                            Name = "Hòn-Đảo"
                        },
                        new
                        {
                            CategoriesId = 14,
                            Name = "Hang động"
                        },
                        new
                        {
                            CategoriesId = 15,
                            Name = "Làng quê"
                        },
                        new
                        {
                            CategoriesId = 16,
                            Name = "Đền"
                        },
                        new
                        {
                            CategoriesId = 17,
                            Name = "Chùa"
                        },
                        new
                        {
                            CategoriesId = 18,
                            Name = "Núi"
                        },
                        new
                        {
                            CategoriesId = 19,
                            Name = "Đặc sản"
                        },
                        new
                        {
                            CategoriesId = 20,
                            Name = "Thác"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PreCommentId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("PreCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Following", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FolloweeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowerId", "FolloweeId");

                    b.HasIndex("FolloweeId");

                    b.ToTable("Followings", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationsDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationsDetailId");

                    b.ToTable("Images", (string)null);

                    b.HasData(
                        new
                        {
                            ImageId = 100,
                            LocationId = 100,
                            Path = "https://drive.google.com/uc?export=view&id=1fHOZklZjf9AatLGCPmQkV3YarE5s7Wjp"
                        },
                        new
                        {
                            ImageId = 101,
                            LocationId = 101,
                            Path = "https://drive.google.com/uc?export=view&id=1K4ooUsEFygeX6QT0VEhg8rAJCRhZ9R52"
                        },
                        new
                        {
                            ImageId = 102,
                            LocationId = 102,
                            Path = "https://drive.google.com/uc?export=view&id=1kWC4nZYnEzod1FCV6XRgvjiKsPMh0ExZ"
                        },
                        new
                        {
                            ImageId = 103,
                            LocationId = 103,
                            Path = "https://drive.google.com/uc?export=view&id=18AGFSaOqlD9kCVdYJCGxW0uxLBlaOiiq"
                        },
                        new
                        {
                            ImageId = 104,
                            LocationId = 104,
                            Path = "https://drive.google.com/uc?export=view&id=1Bnl07rzofdANpc2WpLHJuw3DCgNd9VSI"
                        },
                        new
                        {
                            ImageId = 105,
                            LocationId = 105,
                            Path = "https://drive.google.com/uc?export=view&id=1waEm4TJvDVU4_3L_O5UK2f0RP5z5qQfi"
                        },
                        new
                        {
                            ImageId = 106,
                            LocationId = 106,
                            Path = "https://drive.google.com/uc?export=view&id=1UNCVk-LPleq1c40b1ds9kRsKHzmHqfWw"
                        },
                        new
                        {
                            ImageId = 107,
                            LocationId = 107,
                            Path = "https://drive.google.com/uc?export=view&id=1R9qLfvWn12fLQHYWtDbMegLo4HLsKPmX"
                        },
                        new
                        {
                            ImageId = 108,
                            LocationId = 108,
                            Path = "https://drive.google.com/uc?export=view&id=1PzvX1Q5Y4huY_RnudtCazFUuSj9xuOlG"
                        },
                        new
                        {
                            ImageId = 109,
                            LocationId = 109,
                            Path = "https://drive.google.com/uc?export=view&id=1AAO5vZrU53PDeypYUR3pV4u5UhkPd_O1"
                        },
                        new
                        {
                            ImageId = 110,
                            LocationId = 110,
                            Path = "https://drive.google.com/uc?export=view&id=1PIK0JFgllAEa6RN4Opblx1K77UcelEZ5"
                        },
                        new
                        {
                            ImageId = 111,
                            LocationId = 111,
                            Path = "https://drive.google.com/uc?export=view&id=1nSRZ9hTobuz-SHKd00KhDdV7XoluAYQK"
                        },
                        new
                        {
                            ImageId = 112,
                            LocationId = 112,
                            Path = "https://drive.google.com/uc?export=view&id=1cjioOGuG1fr-4euclgnr0TnmmrU5TcZD"
                        },
                        new
                        {
                            ImageId = 113,
                            LocationId = 113,
                            Path = "https://drive.google.com/uc?export=view&id=1C7zq3aLyTK4sGr6i7-TfSKkd-Aw1ptG-"
                        },
                        new
                        {
                            ImageId = 114,
                            LocationId = 114,
                            Path = "https://drive.google.com/uc?export=view&id=1bMYjn3JpgI7YHEnQykuBAFfxC0Vazyqw"
                        },
                        new
                        {
                            ImageId = 115,
                            LocationId = 115,
                            Path = "https://drive.google.com/uc?export=view&id=1f0i9wBq8A6DoFYAcX8hUbVe4Wf1yDQUq"
                        },
                        new
                        {
                            ImageId = 116,
                            LocationId = 116,
                            Path = "https://drive.google.com/uc?export=view&id=1WdiUgauHIaDfwP_bDWU82Vqx-vmWXa9Z"
                        },
                        new
                        {
                            ImageId = 117,
                            LocationId = 117,
                            Path = "https://drive.google.com/uc?export=view&id=19DacLfp54jpo1ewNoXGxpqny0SvxJnmz"
                        },
                        new
                        {
                            ImageId = 118,
                            LocationId = 118,
                            Path = "https://drive.google.com/uc?export=view&id=1rii4B0soXl-fwucpEjAXmhyz7MMQ-myA"
                        },
                        new
                        {
                            ImageId = 119,
                            LocationId = 119,
                            Path = "https://drive.google.com/uc?export=view&id=1tkwcEXYjTZn5SBXpBbdT4ikyIjICcqH3"
                        },
                        new
                        {
                            ImageId = 120,
                            LocationId = 120,
                            Path = "https://drive.google.com/uc?export=view&id=1q9L3iReSw4sgz0QLHgQBHeZBGNt7iobb"
                        },
                        new
                        {
                            ImageId = 121,
                            LocationId = 121,
                            Path = "https://drive.google.com/uc?export=view&id=1BYL9Hvry4zxawm2oxY8ssRXLW_GIWrbK"
                        },
                        new
                        {
                            ImageId = 122,
                            LocationId = 122,
                            Path = "https://drive.google.com/uc?export=view&id=1nNybfHTFFpKy2lWp3ywijmEuoyPwYwt4"
                        },
                        new
                        {
                            ImageId = 123,
                            LocationId = 123,
                            Path = "https://drive.google.com/uc?export=view&id=1qwwi96MqYdJC6DUAXrK9PQ_bn-eWCtZD"
                        },
                        new
                        {
                            ImageId = 124,
                            LocationId = 124,
                            Path = "https://drive.google.com/uc?export=view&id=1eDbyrsZdqH5utcrG-sIOVF9j6TbS5W89"
                        },
                        new
                        {
                            ImageId = 125,
                            LocationId = 125,
                            Path = "https://drive.google.com/uc?export=view&id=1TvfPRC_MzJA8EsOYRbP-bqKEzqxWpo3m"
                        },
                        new
                        {
                            ImageId = 126,
                            LocationId = 126,
                            Path = "https://drive.google.com/uc?export=view&id=1vLrmVAm4u3VFhZ3e30num2FJ7IcpHPX4"
                        },
                        new
                        {
                            ImageId = 127,
                            LocationId = 127,
                            Path = "https://drive.google.com/uc?export=view&id=1huB0477UFGuGlcqLRFkaS7v1Ea6JdWZW"
                        },
                        new
                        {
                            ImageId = 128,
                            LocationId = 128,
                            Path = "https://drive.google.com/uc?export=view&id=1coJouzaEKjS9dGP2COMPazyG2G3mGxUD"
                        },
                        new
                        {
                            ImageId = 129,
                            LocationId = 129,
                            Path = "https://drive.google.com/uc?export=view&id=1hkSbvZ6laBLO6jEaq9mQvL-weq1gX6l5"
                        },
                        new
                        {
                            ImageId = 130,
                            LocationId = 130,
                            Path = "https://drive.google.com/uc?export=view&id=1xA1Uj-qEILAZ04UrdVotKkfyRPihrd3r"
                        },
                        new
                        {
                            ImageId = 131,
                            LocationId = 131,
                            Path = "https://drive.google.com/uc?export=view&id=1xr3M5sb0tKp8MDse3US1NzxnjoKN9tty"
                        },
                        new
                        {
                            ImageId = 132,
                            LocationId = 132,
                            Path = "https://drive.google.com/uc?export=view&id=1W5lZtJfhsnLAaA_o8x-qWEFG9zNTTxIZ"
                        },
                        new
                        {
                            ImageId = 133,
                            LocationId = 133,
                            Path = "https://drive.google.com/uc?export=view&id=1JT_h0T3bmdjqRRZr1wQrnqCrKE2rB8yl"
                        },
                        new
                        {
                            ImageId = 134,
                            LocationId = 134,
                            Path = "https://drive.google.com/uc?export=view&id=13rM4ccF2DXUHkv2obM0osGOs2Rvy6a8I"
                        },
                        new
                        {
                            ImageId = 135,
                            LocationId = 135,
                            Path = "https://drive.google.com/uc?export=view&id=1TJjrOqRAhJ-8thxNO3YdcC4uHUtEi3-W"
                        },
                        new
                        {
                            ImageId = 136,
                            LocationId = 136,
                            Path = "https://drive.google.com/uc?export=view&id=1bXK36UtHqWggEr1Yk9I7V11yeaUjvUdc"
                        },
                        new
                        {
                            ImageId = 137,
                            LocationId = 137,
                            Path = "https://drive.google.com/uc?export=view&id=16yktL6QoBK0ec-PsnMK8u8sbMslLHrtg"
                        },
                        new
                        {
                            ImageId = 138,
                            LocationId = 138,
                            Path = "https://drive.google.com/uc?export=view&id=10Mjl_UX6YYnxfM9LBaKWz10F5p3KnQ5k"
                        },
                        new
                        {
                            ImageId = 139,
                            LocationId = 139,
                            Path = "https://drive.google.com/uc?export=view&id=1E3Nu7KhR-hZzi8d1geekxGHUXJUgCX0Z"
                        },
                        new
                        {
                            ImageId = 140,
                            LocationId = 140,
                            Path = "https://drive.google.com/uc?export=view&id=1mNK-Bysxg90876o9cRMVE--xAzm5bS2E"
                        },
                        new
                        {
                            ImageId = 141,
                            LocationId = 141,
                            Path = "https://drive.google.com/uc?export=view&id=18uda_mP0wTbHET2mWsds6aC3J-GVrCXh"
                        },
                        new
                        {
                            ImageId = 142,
                            LocationId = 142,
                            Path = "https://drive.google.com/uc?export=view&id=11_L8m1S3XRfHSKC_5_MkiSc-EbMZ5AQN"
                        },
                        new
                        {
                            ImageId = 143,
                            LocationId = 143,
                            Path = "https://drive.google.com/uc?export=view&id=1D42PxvUs1oWT8UVsikjscrt94B5i7vGk"
                        },
                        new
                        {
                            ImageId = 144,
                            LocationId = 144,
                            Path = "https://drive.google.com/uc?export=view&id=1GUOlBXCGMI0OjF8qXmwlxxmizww8HzBB"
                        },
                        new
                        {
                            ImageId = 145,
                            LocationId = 145,
                            Path = "https://drive.google.com/uc?export=view&id=10xyM2v1VrwfYhPN2z1b-P-aTqDNLtXFO"
                        },
                        new
                        {
                            ImageId = 146,
                            LocationId = 146,
                            Path = "https://drive.google.com/uc?export=view&id=1zqKNc8iD_eBxkQMw-RpSlN5xRhT_L_48"
                        },
                        new
                        {
                            ImageId = 147,
                            LocationId = 147,
                            Path = "https://drive.google.com/uc?export=view&id=1In_gKRvfxPL7HDSa7ajfnHqw-h41J5eu"
                        },
                        new
                        {
                            ImageId = 148,
                            LocationId = 148,
                            Path = "https://drive.google.com/uc?export=view&id=1muXfZ1NI5802rhf5K56aNEFIe3VWhCmW"
                        },
                        new
                        {
                            ImageId = 149,
                            LocationId = 149,
                            Path = "https://drive.google.com/uc?export=view&id=12lSjx2kAZ_4QKNkrF3WdLwdDWZcFCA7d"
                        },
                        new
                        {
                            ImageId = 150,
                            LocationId = 150,
                            Path = "https://drive.google.com/uc?export=view&id=1YCpp-SLUCaF6bG_7ThevfQkEunkFi2Lg"
                        },
                        new
                        {
                            ImageId = 151,
                            LocationId = 151,
                            Path = "https://drive.google.com/uc?export=view&id=1mCJDso1_7SUMzTqLWbb-LhDN_s8auY9R"
                        },
                        new
                        {
                            ImageId = 152,
                            LocationId = 152,
                            Path = "https://drive.google.com/uc?export=view&id=1VbHR10OTxGiHPysB5cSzOsa2JrAhiX3C"
                        },
                        new
                        {
                            ImageId = 153,
                            LocationId = 153,
                            Path = "https://drive.google.com/uc?export=view&id=1IDx-I98-YJrS4V1o31H1qGJxK0y-yznP"
                        },
                        new
                        {
                            ImageId = 154,
                            LocationId = 154,
                            Path = "https://drive.google.com/uc?export=view&id=1VvzQnuphX8yr5qg5Jbq2yX0KjpwSSLqu"
                        },
                        new
                        {
                            ImageId = 155,
                            LocationId = 155,
                            Path = "https://drive.google.com/uc?export=view&id=1VvzQnuphX8yr5qg5Jbq2yX0KjpwSSLqu"
                        },
                        new
                        {
                            ImageId = 156,
                            LocationId = 156,
                            Path = "https://drive.google.com/uc?export=view&id=1VvzQnuphX8yr5qg5Jbq2yX0KjpwSSLqu"
                        },
                        new
                        {
                            ImageId = 157,
                            LocationId = 157,
                            Path = "https://drive.google.com/uc?export=view&id=1VvzQnuphX8yr5qg5Jbq2yX0KjpwSSLqu"
                        },
                        new
                        {
                            ImageId = 158,
                            LocationId = 158,
                            Path = "https://drive.google.com/uc?export=view&id=1VvzQnuphX8yr5qg5Jbq2yX0KjpwSSLqu"
                        },
                        new
                        {
                            ImageId = 159,
                            LocationId = 159,
                            Path = "https://drive.google.com/uc?export=view&id=1osjGuuBmGRN9hFBSZlDkeZ509cElGmzG"
                        },
                        new
                        {
                            ImageId = 160,
                            LocationId = 160,
                            Path = "https://drive.google.com/uc?export=view&id=1pYNym5ylCPQrBH8S9YLDxA-Ll7izvOa0"
                        },
                        new
                        {
                            ImageId = 161,
                            LocationId = 161,
                            Path = "https://drive.google.com/uc?export=view&id=1Po7TnNb9d4r9MpBZotFdfAI88D65gplv"
                        },
                        new
                        {
                            ImageId = 162,
                            LocationId = 162,
                            Path = "https://drive.google.com/uc?export=view&id=1iP4s0LuF7ChPsrNSOnjF2ELqL_x_0vMu"
                        },
                        new
                        {
                            ImageId = 163,
                            LocationId = 163,
                            Path = "https://drive.google.com/uc?export=view&id=1a8EjKeMsREiOZSMXiKi_8fVJAdvf-OR8"
                        },
                        new
                        {
                            ImageId = 164,
                            LocationId = 164,
                            Path = "https://drive.google.com/uc?export=view&id=1kF3ovOwv7T27mj2QzvF83litiTt4iuy2"
                        },
                        new
                        {
                            ImageId = 165,
                            LocationId = 165,
                            Path = "https://drive.google.com/uc?export=view&id=1XKDI9qr2CVKocZhhMJCAkbpARvFnrJVm"
                        },
                        new
                        {
                            ImageId = 166,
                            LocationId = 166,
                            Path = "https://drive.google.com/uc?export=view&id=1w-2BZjO_whBby3mMrdCYfQG14PQJgrrT"
                        },
                        new
                        {
                            ImageId = 167,
                            LocationId = 167,
                            Path = "https://drive.google.com/uc?export=view&id=12XYgeFHpABQSfHZ5sd7uN2ERHU066H_l"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("View")
                        .HasColumnType("int");

                    b.HasKey("LocationId");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            LocationId = 100,
                            Address = "Phạm Ngũ Lão, Phường Phạm Ngũ Lão, Quận 1, Thành phố Hồ Chí Minh, Việt Nam",
                            Name = "Công viên 23/9"
                        },
                        new
                        {
                            LocationId = 101,
                            Address = "9 Nguyễn Đình Chiểu, Phường 6, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = " Bảo tàng Hồ Chí Minh"
                        },
                        new
                        {
                            LocationId = 102,
                            Address = "160 Pasteur, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = " Nhà hàng Ngon"
                        },
                        new
                        {
                            LocationId = 103,
                            Address = "Đường Thùy Vân, Tp. Vũng Tàu, Việt Nam",
                            Name = "Bãi Thùy Vân (bãi Sau)"
                        },
                        new
                        {
                            LocationId = 104,
                            Address = "đường Rừng Sác, xã Long Hòa, huyện Cần Giờ, Thành phố Hồ Chí Minh, Việt Nam",
                            Name = "Rừng Sác"
                        },
                        new
                        {
                            LocationId = 105,
                            Address = "101 Tôn Dật Tiên, Tân Phú, Quận 7 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Rạp chiếu phim CGV Crescent Mall "
                        },
                        new
                        {
                            LocationId = 106,
                            Address = "10-12 Đinh Tiên Hoàng, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Khoa học Xã hội và Nhân văn "
                        },
                        new
                        {
                            LocationId = 107,
                            Address = "Trương Định, Phường Bến Thành, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công viên Tao Đàn "
                        },
                        new
                        {
                            LocationId = 108,
                            Address = "01 Công xã Paris, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Nhà thờ Đức Bà Sài Gòn "
                        },
                        new
                        {
                            LocationId = 109,
                            Address = "120 Xa lộ Hà Nội, Tân Phú, Quận 9 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Suối Tiên "
                        },
                        new
                        {
                            LocationId = 110,
                            Address = "7 Công trường Lam Sơn, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Nhà hát Thành phố Hồ Chí Minh  "
                        },
                        new
                        {
                            LocationId = 111,
                            Address = "số 25 đường Học Lạc, phường 14, quận 5, thành phố Hồ Chí Minh, Việt Nam",
                            Name = "Nhà Thờ Cha Tam"
                        },
                        new
                        {
                            LocationId = 112,
                            Address = "87/8P Xuân Thới Thượng 6, xã Xuân Thới Đông, huyện Hóc Môn, thành phố Hồ Chí Minh, Việt Nam",
                            Name = "Công Viên Cá Koi Rinrin Park"
                        },
                        new
                        {
                            LocationId = 113,
                            Address = "216 Võ Thị Sáu, Phường 7, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = " Trường Quốc tế Úc "
                        },
                        new
                        {
                            LocationId = 114,
                            Address = "289 Hai Bà Trưng, Đa Kao, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Nhà thờ Tân Định "
                        },
                        new
                        {
                            LocationId = 115,
                            Address = "108-120 Lê Duẩn, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu công viên 30/4  "
                        },
                        new
                        {
                            LocationId = 116,
                            Address = "233B Nguyễn Văn Cừ, Phường 4, Quận 5 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công Viên Nước Lego Water Park"
                        },
                        new
                        {
                            LocationId = 117,
                            Address = "565 Lạc Long Quân, Phường 10, Quận Tân Bình ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Chùa Giác Lâm "
                        },
                        new
                        {
                            LocationId = 118,
                            Address = "48 Văn Thánh, Phường 9, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Văn Thánh "
                        },
                        new
                        {
                            LocationId = 119,
                            Address = " 728 Võ Văn Kiệt, Phường 1, Quận 5 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Nhà hàng Làng Nướng Nam Bộ  "
                        },
                        new
                        {
                            LocationId = 120,
                            Address = "1147 Bình Quới, Phường 28, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Bình Quới 1"
                        },
                        new
                        {
                            LocationId = 121,
                            Address = " 59-61 Nguyễn Bỉnh Khiêm, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Rạp chiếu phim CGV Liberty Citypoint "
                        },
                        new
                        {
                            LocationId = 122,
                            Address = "Lê Lợi, Phường Bến Thành, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Chợ Bến Thành "
                        },
                        new
                        {
                            LocationId = 123,
                            Address = "26 Lê Thị Riêng, Phường Phạm Ngũ Lão, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán ăn Huỳnh Hoa"
                        },
                        new
                        {
                            LocationId = 124,
                            Address = "Phạm Văn Đồng, Phường 3, Quận Gò Vấp ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công viên Gia Định "
                        },
                        new
                        {
                            LocationId = 125,
                            Address = "30 Trần Hưng Đạo, Cầu Ông Lãnh, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Nhà hát Kịch TP. Hồ Chí Minh  "
                        },
                        new
                        {
                            LocationId = 126,
                            Address = " 14E1 Nguyễn Thị Minh Khai, Đa Kao, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán cà phê Cộng Cà Phê "
                        },
                        new
                        {
                            LocationId = 127,
                            Address = "Số 01 đường Hoa Phượng, phường 2, quận Phú Nhuận ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trung tâm Thể thao Rạch Miễu "
                        },
                        new
                        {
                            LocationId = 128,
                            Address = "1 Nguyễn Bỉnh Khiêm, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Bảo tàng Lịch sử TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 129,
                            Address = " Phạm Ngũ Lão, Phường Phạm Ngũ Lão, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Phố đi bộ Bùi Viện "
                        },
                        new
                        {
                            LocationId = 130,
                            Address = "Đồng Khởi, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công viên Lê Văn Tám "
                        },
                        new
                        {
                            LocationId = 131,
                            Address = "22A Bến Vân Đồn, Phường 12, Quận 4, Hồ Chí Minh, Việt Nam",
                            Name = "Cầu Mống"
                        },
                        new
                        {
                            LocationId = 132,
                            Address = "11 Sư Vạn Hạnh, Phường 12, Quận 10 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Vạn Hạnh Mall "
                        },
                        new
                        {
                            LocationId = 133,
                            Address = "720A Điện Biên Phủ, Phường 22, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trung tâm mua sắm Vincom Center Landmark 81 "
                        },
                        new
                        {
                            LocationId = 134,
                            Address = "Ấp Phú Hiệp, xã Phú Mỹ Hưng, huyện Củ Chi, Tp. Hồ Chí Minh, Việt Nam",
                            Name = "Địa Đạo Củ Chi"
                        },
                        new
                        {
                            LocationId = 135,
                            Address = "Nằm giữa 3 đường: Võ Văn Tần, Phạm Ngọc Thạch và Trần Cao Vân, quận 3, TP Hồ Chí Minh, Việt Nam",
                            Name = "Hồ Con Rùa"
                        },
                        new
                        {
                            LocationId = 136,
                            Address = "905A Hùng Vương, Phường 9, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Bửu Long "
                        },
                        new
                        {
                            LocationId = 137,
                            Address = "97A Phó Đức Chính, Nguyễn Thái Bình, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Bảo tàng Mỹ thuật TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 138,
                            Address = "23-25 Lê Thị Riêng, Bến Thành, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công viên Lê Thị Riêng "
                        },
                        new
                        {
                            LocationId = 139,
                            Address = "268 Lý Thường Kiệt, Phường 14, Quận 10 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Bách Khoa TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 140,
                            Address = "Đường 11,phường Long Thạnh Mỹ, Quận 9, Hồ Chí Minh, Việt Nam",
                            Name = "Khu Du Lịch Suối Mơ"
                        },
                        new
                        {
                            LocationId = 141,
                            Address = "7, 2 Hải Triều, Bến Nghé, Quận 1, Hồ Chí Minh, Việt Nam",
                            Name = "Tòa Tháp Bitexco"
                        },
                        new
                        {
                            LocationId = 142,
                            Address = "48 Văn Thánh, Phường 9, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Khu du lịch Văn Thánh Miếu Nổi  "
                        },
                        new
                        {
                            LocationId = 143,
                            Address = "15 Nguyễn Thị Minh Khai, Phường Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán cà phê The Coffee House "
                        },
                        new
                        {
                            LocationId = 144,
                            Address = "106 Võ Văn Kiệt, Phường 6, Quận 5, TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công Viên Nước Đại Thế Giới"
                        },
                        new
                        {
                            LocationId = 145,
                            Address = "59C Nguyễn Đình Chiểu, Phường 6, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Kinh tế TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 146,
                            Address = "Tầng 5, Parkson Flemington, 184 Lê Đại Hành, Phường 15, Quận 11 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Rạp chiếu phim CGV Cinemas "
                        },
                        new
                        {
                            LocationId = 147,
                            Address = "3 Hòa Bình, Phường 3, Quận 11 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Công viên Văn hóa Đầm Sen "
                        },
                        new
                        {
                            LocationId = 148,
                            Address = "14 Nguyễn Thị Minh Khai, Bến Nghé, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán cà phê The Coffee Bean & Tea Leaf"
                        },
                        new
                        {
                            LocationId = 149,
                            Address = "Đường số 9, Khu đô thị Him Lam, Quận 7, Hồ Chí Minh, Việt Nam",
                            Name = "Bảo Tàng Tranh 3D Sài Gòn"
                        },
                        new
                        {
                            LocationId = 150,
                            Address = "Tân Phong, Quận 7, thành phố Hồ Chí Minh, Việt Nam",
                            Name = "Khu Đô Thị Phú Mỹ Hưng"
                        },
                        new
                        {
                            LocationId = 151,
                            Address = "157-159 Nguyễn Thị Minh Khai, Phường 6, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán cà phê Highlands Coffee  "
                        },
                        new
                        {
                            LocationId = 152,
                            Address = " 127 Trần Quốc Thảo, Phường 7, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán ăn Bánh Cuốn Tây Hồ  "
                        },
                        new
                        {
                            LocationId = 153,
                            Address = "264A Nam Kỳ Khởi Nghĩa, Phường 8, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Quán cà phê Trung Nguyên Legend Café "
                        },
                        new
                        {
                            LocationId = 154,
                            Address = "80 Hoàng Hoa Thám, Phường 12, Tân Bình ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Star Cup Coffee "
                        },
                        new
                        {
                            LocationId = 155,
                            Address = " 82 Võ Văn Tần, Phường 6, Quận 3 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Star Cup Coffee "
                        },
                        new
                        {
                            LocationId = 156,
                            Address = "63 Nguyễn Huệ, Bến Nghé, Quận 1  ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Star Cup Coffee "
                        },
                        new
                        {
                            LocationId = 157,
                            Address = " 190 Xô Viết Nghệ Tĩnh, Phường 21, Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Star Cup Coffee "
                        },
                        new
                        {
                            LocationId = 158,
                            Address = " 297 Nguyễn Trãi, Phường Nguyễn Cư Trinh, Quận 1 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Star Cup Coffee "
                        },
                        new
                        {
                            LocationId = 159,
                            Address = "280 An Dương Vương, Phường 4, Quận 5 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Sư phạm TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 160,
                            Address = "2 Trường Sa, Phường 17, Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Ngoại thương TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 161,
                            Address = " 217 Hồng Bàng, Phường 11, Quận 5 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Y Dược TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 162,
                            Address = "268 Lý Thường Kiệt, Phường 14, Quận 10 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Công nghệ Thông tin TP. Hồ Chí Minh "
                        },
                        new
                        {
                            LocationId = 163,
                            Address = " 273 An Dương Vương, Phường 3, Quận 5 ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Sài Gòn  "
                        },
                        new
                        {
                            LocationId = 164,
                            Address = "202 Lê Văn Sỹ, Phường 10, Quận Phú Nhuận ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Đại học Văn Hiến  "
                        },
                        new
                        {
                            LocationId = 165,
                            Address = "475A Điện Biên Phủ, Phường 25, Quận Bình Thạnh ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Công nghệ Thành phố Hồ Chí Minh (Cơ sở chính - SaiGon Campus) "
                        },
                        new
                        {
                            LocationId = 166,
                            Address = " 2, đường Ung Văn Khiêm, Phường 25, Quận Bình Thạnh  ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Công nghệ Thành phố Hồ Chí Minh ( Cơ sở Ung Văn Khiêm)"
                        },
                        new
                        {
                            LocationId = 167,
                            Address = "10/80C XL Hà Nội, Phường Tân Phú, Thủ Đức ,TP. Hồ Chí Minh, Việt Nam",
                            Name = "Trường Đại học Công nghệ Thành phố Hồ Chí Minh  ( Thủ đức Campus )"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.LocationsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PostId");

                    b.ToTable("LocationsDetails", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.NoticeDetail", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("NotificationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("NoticeDetails", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Date = new DateTime(2023, 6, 5, 16, 27, 46, 800, DateTimeKind.Local).AddTicks(2942),
                            Title = "Thông báo hệ thống"
                        },
                        new
                        {
                            NotificationId = 2,
                            Date = new DateTime(2023, 6, 5, 16, 27, 46, 800, DateTimeKind.Local).AddTicks(2953),
                            Title = "Tương tác"
                        });
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.RatingLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Check")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationDetailId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("Stars")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingLocations", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AllegedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AllegedUserId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Saved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Saveds", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Search", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchId"));

                    b.Property<string>("Content")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SearchId");

                    b.HasIndex("UserId");

                    b.ToTable("Searchs", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Shares", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VideoId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumericalOrder")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("VideoId");

                    b.HasIndex("PostId");

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d1f771da-b318-42f8-a003-5a15614216f5"),
                            RoleId = new Guid("a18be9c0-aa65-4af8-bd17-00bd9344e575")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BaseProject.Data.Entities.CategoriesDetail", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany("CategoriesDetail")
                        .HasForeignKey("AppUserId");

                    b.HasOne("BaseProject.Data.Entities.Category", "Category")
                        .WithMany("CategoriesDetail")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("CategoriesDetail")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.CategoriesLocation", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Category", "Category")
                        .WithMany("CategoriesLocation")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Location", "Location")
                        .WithMany("CategoriesLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Comment", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("Comment")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Comment", "PreComment")
                        .WithMany()
                        .HasForeignKey("PreCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("PreComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Following", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", "Followee")
                        .WithMany("Follower")
                        .HasForeignKey("FolloweeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "Follower")
                        .WithMany("Followee")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Followee");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Image", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Location", "Location")
                        .WithMany("Image")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.LocationsDetail", "LocationsDetail")
                        .WithMany("Image")
                        .HasForeignKey("LocationsDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("LocationsDetail");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.LocationsDetail", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany("LocationsDetail")
                        .HasForeignKey("AppUserId");

                    b.HasOne("BaseProject.Data.Entities.Location", "Location")
                        .WithMany("LocationsDetail")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("LocationsDetail")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.NoticeDetail", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Notification", "Notification")
                        .WithMany("NoticeDetail")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("NoticeDetail")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Post", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.RatingLocation", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Location", "Location")
                        .WithMany("RatingLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("RatingLocation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Report", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", "AllegedUser")
                        .WithMany()
                        .HasForeignKey("AllegedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Comment", "Comment")
                        .WithMany("Report")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("Report")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("Report")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllegedUser");

                    b.Navigation("Comment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Saved", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("Saved")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Search", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("Search")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Share", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("Share")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", "User")
                        .WithMany("Share")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Video", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.Post", "Post")
                        .WithMany("Video")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BaseProject.Data.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseProject.Data.Entities.AppUser", b =>
                {
                    b.Navigation("CategoriesDetail");

                    b.Navigation("Comment");

                    b.Navigation("Followee");

                    b.Navigation("Follower");

                    b.Navigation("LocationsDetail");

                    b.Navigation("NoticeDetail");

                    b.Navigation("RatingLocation");

                    b.Navigation("Report");

                    b.Navigation("Saved");

                    b.Navigation("Search");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoriesDetail");

                    b.Navigation("CategoriesLocation");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Comment", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Location", b =>
                {
                    b.Navigation("CategoriesLocation");

                    b.Navigation("Image");

                    b.Navigation("LocationsDetail");

                    b.Navigation("RatingLocation");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.LocationsDetail", b =>
                {
                    b.Navigation("Image");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Notification", b =>
                {
                    b.Navigation("NoticeDetail");
                });

            modelBuilder.Entity("BaseProject.Data.Entities.Post", b =>
                {
                    b.Navigation("CategoriesDetail");

                    b.Navigation("Comment");

                    b.Navigation("LocationsDetail");

                    b.Navigation("Report");

                    b.Navigation("Share");

                    b.Navigation("Video");
                });
#pragma warning restore 612, 618
        }
    }
}
